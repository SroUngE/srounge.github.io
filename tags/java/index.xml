<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Java - Tag - Rong&#39;s Blog</title>
        <link>http://example.org/tags/java/</link>
        <description>Java - Tag - Rong&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>977683159@qq.com (SroUngE)</managingEditor>
            <webMaster>977683159@qq.com (SroUngE)</webMaster><lastBuildDate>Sat, 10 Feb 2024 23:53:56 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/java/" rel="self" type="application/rss+xml" /><item>
    <title>Interview Java Thread</title>
    <link>http://example.org/posts/interview-java-thread/</link>
    <pubDate>Sat, 10 Feb 2024 23:53:56 &#43;0800</pubDate>
    <author>SroUngE</author>
    <guid>http://example.org/posts/interview-java-thread/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://s2.loli.net/2024/01/23/FdJWU6IpNZGfACv.png" referrerpolicy="no-referrer">
            </div>如何创建线程 1.继承 Thread 类，重写 run() 方法； public class MyThread extends Thread { @Override public void run() { System.out.println(Thread.currentThread().getName()); } public static void main(String[] args) { MyThread mThread1=new MyThread(); MyThread mThread2=new MyThread(); MyThread myThread3=new MyThread(); mThread1.start(); mThread2.start(); myThread3.start(); } } 2.实现 Runnable 接口，重写 run() 方法； public class MyThread implements]]></description>
</item>
<item>
    <title>排序：归并排序</title>
    <link>http://example.org/posts/java-sort-merge-sort/</link>
    <pubDate>Fri, 12 Jan 2024 00:00:00 &#43;0000</pubDate>
    <author>SroUngE</author>
    <guid>http://example.org/posts/java-sort-merge-sort/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://s2.loli.net/2024/01/23/3qPWMLs9UBogi7A.png" referrerpolicy="no-referrer">
            </div>归并排序的算法实现，基于《算法》的java版本，包括自顶向下和自底向上的两种。]]></description>
</item>
<item>
    <title>[翻译]Java高效泛型——Effective Generics</title>
    <link>http://example.org/posts/java-effective-generics-chinese/</link>
    <pubDate>Sun, 26 Nov 2023 00:00:00 &#43;0000</pubDate>
    <author>SroUngE</author>
    <guid>http://example.org/posts/java-effective-generics-chinese/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://s2.loli.net/2024/01/23/FdJWU6IpNZGfACv.png" referrerpolicy="no-referrer">
            </div>翻译《Java Generics and Collections》这本书的第8章节Effective Generics，其中介绍了一些关于如何在代码实践中有效使用泛型的建议。]]></description>
</item>
<item>
    <title>Java 泛型的深入思考：从历史起源到最佳实践</title>
    <link>http://example.org/posts/java-generic/</link>
    <pubDate>Wed, 01 Nov 2023 00:00:00 &#43;0000</pubDate>
    <author>SroUngE</author>
    <guid>http://example.org/posts/java-generic/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://s2.loli.net/2024/01/23/FdJWU6IpNZGfACv.png" referrerpolicy="no-referrer">
            </div>一个关于Java泛型的简短的研究调查和思考，依据官方的参考资料，试图理解泛型存在的意义，以及它的最佳实践。]]></description>
</item>
</channel>
</rss>
